
The ws-handler holds a write-/sink and a request/source function 
(received by the queue-component) - how to provide those? factory fn? protocol method?
to the event-queue or the queue itself in a closure

The ws-handler function is passed into the main-handler - via the Ws-Handler-.. component
it's attached to the /ws(-connect) route
It creates a user-socket (duplex-stream/source-and-sink) per user connection

may want to wait for a userID event
optionally maintain this ID - and socket connection
tag each message with client id.

The created user-socket:
- just store in "clients" atom for debugging - but don't actually use clients/make obsolete!
- user socket can just be consumed and fed into the queue-write/sink function
  - a function could be created on the first (auth/setup) message, which tags the message with a client/userID?
  - this id should also be stored in clients atom

why should I really need this pre-id ?? client can just always send it!!/?

the user socket needs a producer (incomming) and a consumer (outgoing) component
the consumer (outg) will be an actor which is pulling from queue via request/reply
consumer will only need a ref to the socket sink/write
consumer can be paused
consumer is also selective: will only send (or pull from queue/no?) messages the client is interested in

the producer (incoming) should combine several arriving messages (array of events)
into one message - producer will simply take-all from socket and integrate the queue/append!
producer might pause - buffer, disconnect
receive special command values - that will prefix/generate events. will commands enrich event data/async access DB?
will they just be passed into queue?
there was a question somewere: why not just store the commands??

